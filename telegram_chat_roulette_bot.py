import logging
import os
import time
from pathlib import Path
import json
from collections import deque
import html

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ConversationHandler,
    filters,
    ContextTypes,
)

# --- Configuration & Constants ---
ADMIN_ID = 5413055151
DATA_DIR = Path(os.getenv('DATA_DIR', '/app/data'))
DATA_DIR.mkdir(parents=True, exist_ok=True)
DATA_FILE = DATA_DIR / "data.json"

# --- Logging ---
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- Global State ---
search_queue: deque[int] = deque()
active_chats: dict[int, int] = {}
nicknames: dict[int, dict] = {}
ratings: dict[int, dict] = {}
reports: dict[int, int] = {}

# Conversation states
SET_NICKNAME, CHATTING, SET_GENDER, SET_PREFERRED_GENDER = range(4)

# --- Data Persistence ---

def load_data() -> None:
    global search_queue, active_chats, nicknames, ratings, reports
    if DATA_FILE.exists():
        try:
            with open(DATA_FILE, 'r') as f:
                data = json.load(f)
            search_queue = deque(data.get('search_queue', []))
            active_chats = {int(k): int(v) for k, v in data.get('active_chats', {}).items()}
            nicknames = {int(k): v for k, v in data.get('nicknames', {}).items()}
            ratings = {int(k): v for k, v in data.get('ratings', {}).items()}
            reports = {int(k): v for k, v in data.get('reports', {}).items()}
            logger.info(f"Loaded data from {DATA_FILE}")
        except Exception as e:
            logger.error(f"Failed to load data: {e}")
            search_queue.clear()
            active_chats.clear()
            nicknames.clear()
            ratings.clear()
            reports.clear()
    else:
        logger.info(f"Data file {DATA_FILE} not found; starting fresh.")


def save_data() -> None:
    payload = {
        'search_queue': list(search_queue),
        'active_chats': {str(k): v for k, v in active_chats.items()},
        'nicknames': {str(k): v for k, v in nicknames.items()},
        'ratings': {str(k): v for k, v in ratings.items()},
        'reports': {str(k): v for k, v in reports.items()},
    }
    try:
        with open(DATA_FILE, 'w') as f:
            json.dump(payload, f, indent=2)
        logger.info(f"Saved data to {DATA_FILE}")
    except Exception as e:
        logger.error(f"Failed to save data: {e}")

# --- Keyboards ---
def get_main_keyboard(user_id=None, message_id=None):
    keyboard = [
        [InlineKeyboardButton("üîç –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞", callback_data="find")],
        [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –ø–æ –ø–æ–ª—É", callback_data="find_by_gender")],
        [InlineKeyboardButton("üö™ –ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç", callback_data="end")],
        [InlineKeyboardButton("‚úèÔ∏è –°–º–µ–Ω–∏—Ç—å –ø—Å–µ–≤–¥–æ–Ω–∏–º", callback_data="set_nickname")],
        [InlineKeyboardButton("‚öß –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–ª", callback_data="set_gender")],
    ]
    return InlineKeyboardMarkup(keyboard)

def get_gender_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üë® –ú—É–∂—Å–∫–æ–π", callback_data="gender_male"),
         InlineKeyboardButton("üë© –ñ–µ–Ω—Å–∫–∏–π", callback_data="gender_female"),
         InlineKeyboardButton("‚ùì –ù–µ —É–∫–∞–∑–∞–Ω", callback_data="gender_none")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_gender")],
    ])

def get_preferred_gender_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üë® –ú—É–∂—á–∏–Ω", callback_data="pref_gender_male"),
         InlineKeyboardButton("üë© –ñ–µ–Ω—â–∏–Ω", callback_data="pref_gender_female"),
         InlineKeyboardButton("üåê –õ—é–±–æ–π", callback_data="pref_gender_any")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_pref_gender")],
    ])

def get_rating_keyboard(partner_id: int) -> InlineKeyboardMarkup:
    stars = [[InlineKeyboardButton('‚≠ê'*i, callback_data=f'rate_{partner_id}_{i}') for i in range(1, 6)]]
    report = [[InlineKeyboardButton("‚ö†Ô∏è –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è", callback_data=f"report_{partner_id}")]]
    return InlineKeyboardMarkup(stars + report)

# --- Matching Logic ---
async def check_queue(context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = context.job.data if hasattr(context.job, 'data') else None
    if not user_id or user_id not in search_queue:
        return
    queue_copy = list(search_queue)
    for i, u1 in enumerate(queue_copy):
        if u1 not in search_queue:
            continue
        g1 = nicknames.get(u1, {})
        for u2 in queue_copy[i + 1:]:
            if u2 not in search_queue:
                continue
            g2 = nicknames.get(u2, {})
            ok1 = g1.get('preferred_gender', '–õ—é–±–æ–π') in ('–õ—é–±–æ–π', g2.get('gender', '–ù–µ —É–∫–∞–∑–∞–Ω'))
            ok2 = g2.get('preferred_gender', '–õ—é–±–æ–π') in ('–õ—é–±–æ–π', g1.get('gender', '–ù–µ —É–∫–∞–∑–∞–Ω'))
            if ok1 and ok2:
                search_queue.remove(u1)
                search_queue.remove(u2)
                active_chats[u1] = u2
                active_chats[u2] = u1
                await context.bot.send_message(u1, f"üéâ –ß–∞—Ç —Å {html.escape(nicknames[u2]['nickname'])} –Ω–∞—á–∞—Ç!", reply_markup=get_main_keyboard(), parse_mode=ParseMode.HTML)
                await context.bot.send_message(u2, f"üéâ –ß–∞—Ç —Å {html.escape(nicknames[u1]['nickname'])} –Ω–∞—á–∞—Ç!", reply_markup=get_main_keyboard(), parse_mode=ParseMode.HTML)
                return

# --- Handlers ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    u = update.effective_user
    nicknames.setdefault(u.id, {'nickname': f"–ê–Ω–æ–Ω–∏–º_{u.id % 1000}", 'gender': '–ù–µ —É–∫–∞–∑–∞–Ω', 'preferred_gender': '–õ—é–±–æ–π'})

    # –£–¥–∞–ª–∏–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ (inline)
    if update.message:
        await update.message.reply_text(
            f"‚ú® –ü—Ä–∏–≤–µ—Ç, {html.escape(u.first_name)}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç-—Ä—É–ª–µ—Ç–∫—É.",
            reply_markup=get_main_keyboard(),
            parse_mode=ParseMode.HTML
        )
    elif update.callback_query:
        await update.callback_query.edit_message_text(
            f"‚ú® –ü—Ä–∏–≤–µ—Ç, {html.escape(u.first_name)}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç-—Ä—É–ª–µ—Ç–∫—É.",
            reply_markup=get_main_keyboard(),
            parse_mode=ParseMode.HTML
        )
    return CHATTING

async def button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    cmd = query.data

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –±—ã–ª —á–∏—â–µ
    try:
        await query.message.delete()
    except:
        pass

    if cmd == 'find':
        if user_id in active_chats:
            await context.bot.send_message(user_id, "‚ö†Ô∏è –£–∂–µ –≤ —á–∞—Ç–µ!", reply_markup=get_main_keyboard())
        elif user_id not in search_queue:
            search_queue.append(user_id)
            await context.bot.send_message(user_id, f"üîé –ò—â–µ–º... –æ—á–µ—Ä–µ–¥—å: {len(search_queue)}", reply_markup=get_main_keyboard())
            context.job_queue.run_repeating(check_queue, interval=5, first=0, data=user_id, name=f"queue_{user_id}")
        return CHATTING

    if cmd == 'find_by_gender':
        await context.bot.send_message(user_id, "üîç –í—ã–±–µ—Ä–∏ –ø–æ–ª –¥–ª—è –ø–æ–∏—Å–∫–∞:", reply_markup=get_preferred_gender_keyboard())
        return SET_PREFERRED_GENDER

    if cmd == 'end':
        if user_id in active_chats:
            partner = active_chats.pop(user_id)
            active_chats.pop(partner, None)
            try:
                context.job_queue.get_jobs_by_name(f"queue_{user_id}")[0].schedule_removal()
            except IndexError:
                pass
            try:
                context.job_queue.get_jobs_by_name(f"queue_{partner}")[0].schedule_removal()
            except IndexError:
                pass
            await context.bot.send_message(
                chat_id=user_id,
                text=(
                    f"üö™ –ß–∞—Ç –∑–∞–≤–µ—Ä—à—ë–Ω.\n"
                    f"–ö–∞–∫ —Ç–µ–±–µ {html.escape(nicknames.get(partner, {}).get('nickname', '–ø–∞—Ä—Ç–Ω—ë—Ä'))}?"
                ),
                reply_markup=get_rating_keyboard(partner)
            )
            await context.bot.send_message(
                chat_id=partner,
                text=(
                    f"üö™ –¢–≤–æ–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –≤—ã—à–µ–ª –∏–∑ —á–∞—Ç–∞.\n"
                    f"–ö–∞–∫ —Ç–µ–±–µ {html.escape(nicknames.get(user_id, {}).get('nickname', '–ø–∞—Ä—Ç–Ω—ë—Ä'))}?"
                ),
                reply_markup=get_rating_keyboard(user_id)
            )
        elif user_id in search_queue:
            search_queue.remove(user_id)
            try:
                context.job_queue.get_jobs_by_name(f"queue_{user_id}")[0].schedule_removal()
            except IndexError:
                pass
            await context.bot.send_message(user_id, "üîç –ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω—ë–Ω.", reply_markup=get_main_keyboard())
        else:
            await context.bot.send_message(user_id, "ü§î –¢—ã –Ω–µ –≤ —á–∞—Ç–µ.", reply_markup=get_main_keyboard())
        return CHATTING

    if cmd == 'set_nickname':
        await context.bot.send_message(user_id, "‚úèÔ∏è –í–≤–µ–¥–∏ –ø—Å–µ–≤–¥–æ–Ω–∏–º:", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]]))
        return SET_NICKNAME

    if cmd == 'set_gender':
        await context.bot.send_message(user_id, "‚öß –í—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø–æ–ª:", reply_markup=get_gender_keyboard())
        return SET_GENDER

    return CHATTING

async def receive_nickname(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.effective_user.id
    nickname = update.message.text.strip()
    if 1 <= len(nickname) <= 20:
        nicknames[user_id]['nickname'] = nickname
        await update.message.reply_text(
            f"‚úÖ –ü—Å–µ–≤–¥–æ–Ω–∏–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {html.escape(nickname)}",
            reply_markup=get_main_keyboard(), parse_mode=ParseMode.HTML
        )
        return CHATTING
    await update.message.reply_text(
        "‚ö†Ô∏è –ü—Å–µ–≤–¥–æ–Ω–∏–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤."
    )
    return SET_NICKNAME

async def set_gender_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    data = update.callback_query.data
    uid = update.callback_query.from_user.id
    mapping = {
        'gender_male': '–ú—É–∂—Å–∫–æ–π',
        'gender_female': '–ñ–µ–Ω—Å–∫–∏–π',
        'gender_none': '–ù–µ —É–∫–∞–∑–∞–Ω'
    }
    gender = mapping.get(data)
    if gender:
        nicknames[uid]['gender'] = gender
        await update.callback_query.edit_message_text(
            f"‚úÖ –ü–æ–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {gender}",
            reply_markup=get_main_keyboard()
        )
    return CHATTING

async def set_preferred_gender_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    data = update.callback_query.data
    uid = update.callback_query.from_user.id
    pg = {'pref_gender_male':'–ú—É–∂—Å–∫–æ–π','pref_gender_female':'–ñ–µ–Ω—Å–∫–∏–π','pref_gender_any':'–õ—é–±–æ–π'}.get(data)
    if pg:
        nicknames[uid]['preferred_gender'] = pg
        await update.callback_query.edit_message_text(
            f"‚úÖ –ò—â—É: {pg}", reply_markup=get_main_keyboard()
        )
        return CHATTING
    return CHATTING

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    uid=update.effective_user.id
    if uid in active_chats:
        pid=active_chats[uid];msg=update.message
        # text
        if msg.text:
            await context.bot.send_message(pid,f"üí¨ {html.escape(nicknames[uid]['nickname'])}: {html.escape(msg.text)}")
        # photo
        elif msg.photo:
            file=msg.photo[-1].file_id
            await context.bot.send_photo(pid,file,caption=f"üì∏ {html.escape(nicknames[uid]['nickname'])}")
        # video
        elif msg.video:
            await context.bot.send_video(pid,msg.video.file_id,caption=f"üé• {html.escape(nicknames[uid]['nickname'])}")
        # document
        elif msg.document:
            await context.bot.send_document(pid,msg.document.file_id,caption=f"üìÑ {html.escape(nicknames[uid]['nickname'])}")
        # audio
        elif msg.audio:
            await context.bot.send_audio(pid,msg.audio.file_id,caption=f"üéµ {html.escape(nicknames[uid]['nickname'])}")
        # voice
        elif msg.voice:
            await context.bot.send_voice(pid,msg.voice.file_id,caption=f"üé§ {html.escape(nicknames[uid]['nickname'])}")
        # video note
        elif msg.video_note:
            await context.bot.send_video_note(pid,msg.video_note.file_id)
        else:
            await context.bot.send_message(pid,"[–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è]")
    else:
        await update.message.reply_text("ü§î –ù–µ –≤ —á–∞—Ç–µ.",reply_markup=get_main_keyboard())
    return CHATTING

async def handle_rating_or_report(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    user_id = query.from_user.id
    await query.answer()

    try:
        parts = query.data.split('_')
        action = parts[0]

        if action == 'rate' and len(parts) == 3:
            partner_id = int(parts[1])
            rating = int(parts[2])
            if partner_id not in ratings:
                ratings[partner_id] = {'total': 0, 'count': 0}
            ratings[partner_id]['total'] += rating
            ratings[partner_id]['count'] += 1
            avg = ratings[partner_id]['total'] / ratings[partner_id]['count']
            await query.edit_message_text(
                text=f"‚≠ê –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É! –¢–µ–∫—É—â–∏–π —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {avg:.1f}"
            )

        elif action == 'report' and len(parts) == 2:
            partner_id = int(parts[1])
            reports[partner_id] = reports.get(partner_id, 0) + 1
            await query.edit_message_text(
                text=f"‚ö†Ô∏è –ñ–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –û–±—â–µ–µ —á–∏—Å–ª–æ –∂–∞–ª–æ–±: {reports[partner_id]}"
            )
            if reports[partner_id] >= 3:
                await context.bot.send_message(
                    chat_id=partner_id,
                    text="üö´ –ù–∞ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –ø–æ—Å—Ç—É–ø–∏–ª–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∂–∞–ª–æ–±. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–±–ª—é–¥–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ –æ–±—â–µ–Ω–∏—è."
                )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ü–µ–Ω–∫–∏/–∂–∞–ª–æ–±—ã: {e}")
        await query.edit_message_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")

    return CHATTING

async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /admin –≤—ã–∑–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")

    if user_id != ADMIN_ID:
        await update.message.reply_text("üö´ –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return

    total_users = len(nicknames)
    active = len(active_chats) // 2
    searching = len(search_queue)

    reported_lines = []
    for uid, count in reports.items():
        if count >= 3:
            nickname = nicknames.get(uid, {}).get("nickname", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")
            reported_lines.append(f"‚Ä¢ {nickname} (ID: {uid}) ‚Äî {count} –∂–∞–ª–æ–±")

    reported_text = "\n".join(reported_lines) if reported_lines else "–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å 3+ –∂–∞–ª–æ–±–∞–º–∏."

    rating_entries = []
    for uid, data in ratings.items():
        if data["count"] >= 3:
            avg = round(data["total"] / data["count"], 2)
            nickname = nicknames.get(uid, {}).get("nickname", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")
            rating_entries.append((avg, data["count"], nickname, uid))

    top_rated = sorted(rating_entries, reverse=True)[:5]
    if top_rated:
        top_rating_text = "\n".join([
            f"{i+1}. {nickname} (ID: {uid}) ‚Äî {avg} ‚≠ê ({count} –æ—Ü–µ–Ω–æ–∫)"
            for i, (avg, count, nickname, uid) in enumerate(top_rated)
        ])
    else:
        top_rating_text = "–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º."

    text = (
        f"<b>üìä –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{total_users}</b>\n"
        f"üí¨ –í –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–∞—Ö: <b>{active}</b>\n"
        f"üîé –í –ø–æ–∏—Å–∫–µ: <b>{searching}</b>\n\n"
        f"‚≠ê <b>–¢–æ–ø-5 –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É:</b>\n{top_rating_text}\n\n"
        f"‚ö†Ô∏è <b>–ñ–∞–ª–æ–±—ã (3+):</b>\n{reported_text}"
    )

    await update.message.reply_text(text, parse_mode=ParseMode.HTML)

# --- Error Handler ---
async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.error(f"Error: {context.error}")

# --- Main ---
def main() -> None:
    load_data()
    token = os.getenv('BOT_TOKEN')
    if not token:
        logger.error("TOKEN –Ω–µ —É–∫–∞–∑–∞–Ω")
        return
    app = ApplicationBuilder().token(token).build()

    # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–º ADMIN_ID —è–≤–Ω–æ:
    global ADMIN_ID
    ADMIN_ID = int(os.getenv("ADMIN_ID", "5413055151"))

    # –ó–∞–¥–∞—á–∏
    app.job_queue.run_repeating(lambda ctx: save_data(), interval=300, first=300)

    conv = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            SET_NICKNAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_nickname)],
            SET_GENDER: [CallbackQueryHandler(set_gender_choice, pattern='^gender_')],
            SET_PREFERRED_GENDER: [CallbackQueryHandler(set_preferred_gender_choice, pattern='^pref_gender_')],
            CHATTING: [
                CallbackQueryHandler(button, pattern="^(find|find_by_gender|end|set_nickname|set_gender)$"),
                CallbackQueryHandler(handle_rating_or_report, pattern="^(rate|report)_[0-9]+(_[1-5])?$"),
                MessageHandler(filters.ALL, handle_message)
            ]
        },
        fallbacks=[CommandHandler('start', start)]
    )

    app.add_handler(conv)
    app.add_handler(CommandHandler("admin", admin_panel))
    app.add_error_handler(lambda u, c: logger.error(c.error))
    app.run_polling()

if __name__ == '__main__':
    main()
