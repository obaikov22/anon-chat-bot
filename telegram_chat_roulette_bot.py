import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler,
)
import random
from collections import deque
import asyncio
import json
import os

# –í–∫–ª—é—á–µ–Ω–∏–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
DATA_FILE = "data.json"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
search_queue = deque()
active_chats = {}
nicknames = {}
search_messages = {}
search_timeouts = {}
temp_messages = {}

ratings = {}  # {user_id: {"total": int, "count": int}}
reports = {}  # {user_id: count}

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
SET_NICKNAME, CHATTING, SET_GENDER, SET_PREFERRED_GENDER = range(4)

# --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö ---
def load_data():
    if os.path.exists(DATA_FILE):
        try:
            with open(DATA_FILE, "r") as f:
                data = json.load(f)
                search_queue = deque(data.get("search_queue", []))
                active_chats = {int(k): int(v) for k, v in data.get("active_chats", {}).items()}
                nicknames = {int(k): v for k, v in data.get("nicknames", {}).items()}
                ratings = {int(k): v for k, v in data.get("ratings", {}).items()}
                reports = {int(k): v for k, v in data.get("reports", {}).items()}
                return {
                    "search_queue": search_queue,
                    "active_chats": active_chats,
                    "nicknames": nicknames,
                    "ratings": ratings,
                    "reports": reports,
                }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
    return {
        "search_queue": deque(),
        "active_chats": {},
        "nicknames": {},
        "ratings": {},
        "reports": {},
    }

def save_data(data):
    serializable_data = {
        "search_queue": list(data["search_queue"]),
        "active_chats": {str(k): v for k, v in data["active_chats"].items()},
        "nicknames": {str(k): v for k, v in data["nicknames"].items()},
        "ratings": {str(k): v for k, v in data["ratings"].items()},
        "reports": {str(k): v for k, v in data["reports"].items()},
    }
    try:
        with open(DATA_FILE, "w") as f:
            json.dump(serializable_data, f, indent=2)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
loaded = load_data()
search_queue = loaded["search_queue"]
active_chats = loaded["active_chats"]
nicknames = loaded["nicknames"]
ratings = loaded["ratings"]
reports = loaded["reports"]

# --- –§—É–Ω–∫—Ü–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä ---
def get_main_keyboard():
    keyboard = [
        [InlineKeyboardButton("üîç –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞", callback_data="find")],
        [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –ø–æ –ø–æ–ª—É", callback_data="find_by_gender")],
        [InlineKeyboardButton("üö™ –ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç", callback_data="end")],
        [InlineKeyboardButton("‚úèÔ∏è –°–º–µ–Ω–∏—Ç—å –ø—Å–µ–≤–¥–æ–Ω–∏–º", callback_data="set_nickname")],
        [InlineKeyboardButton(" transgender –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–ª", callback_data="set_gender")],
    ]
    return InlineKeyboardMarkup(keyboard)

def get_gender_keyboard():
    keyboard = [
        [
            InlineKeyboardButton("üë® –ú—É–∂—Å–∫–æ–π", callback_data="gender_male"),
            InlineKeyboardButton("üë© –ñ–µ–Ω—Å–∫–∏–π", callback_data="gender_female"),
            InlineKeyboardButton("‚ùì –ù–µ —É–∫–∞–∑–∞–Ω", callback_data="gender_none"),
        ],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_gender")],
    ]
    return InlineKeyboardMarkup(keyboard)

def get_preferred_gender_keyboard():
    keyboard = [
        [
            InlineKeyboardButton("üë® –ú—É–∂—á–∏–Ω", callback_data="pref_gender_male"),
            InlineKeyboardButton("üë© –ñ–µ–Ω—â–∏–Ω", callback_data="pref_gender_female"),
            InlineKeyboardButton("üåê –õ—é–±–æ–π", callback_data="pref_gender_any"),
        ],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_pref_gender")],
    ]
    return InlineKeyboardMarkup(keyboard)

def get_rating_keyboard(partner_id):
    keyboard = [
        [InlineKeyboardButton("‚≠ê", callback_data=f"rate_{partner_id}_1"),
         InlineKeyboardButton("‚≠ê‚≠ê", callback_data=f"rate_{partner_id}_2"),
         InlineKeyboardButton("‚≠ê‚≠ê‚≠ê", callback_data=f"rate_{partner_id}_3"),
         InlineKeyboardButton("‚≠ê‚≠ê‚≠ê‚≠ê", callback_data=f"rate_{partner_id}_4"),
         InlineKeyboardButton("‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê", callback_data=f"rate_{partner_id}_5")],
        [InlineKeyboardButton("‚ö†Ô∏è –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è", callback_data=f"report_{partner_id}")]
    ]
    return InlineKeyboardMarkup(keyboard)

# --- –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    logger.info(f"User {user.id} started the bot")
    message = await update.message.reply_text(
        f"‚ú® –ü—Ä–∏–≤–µ—Ç, {user.first_name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–Ω–æ–Ω–∏–º–Ω—É—é —á–∞—Ç-—Ä—É–ª–µ—Ç–∫—É 2025! üéâ\n"
        "–°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–¥—É–º–∞–π —Å–µ–±–µ –ø—Å–µ–≤–¥–æ–Ω–∏–º –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è.",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úèÔ∏è –ó–∞–¥–∞—Ç—å –ø—Å–µ–≤–¥–æ–Ω–∏–º", callback_data="set_nickname")]
        ])
    )
    temp_messages[user.id] = message.message_id
    return SET_NICKNAME

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Å–µ–≤–¥–æ–Ω–∏–º–∞
async def set_nickname(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    await query.answer()
    logger.info(f"User {user_id} requested to set nickname")
    # –£–¥–∞–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if user_id in temp_messages:
        await context.bot.delete_message(chat_id=user_id, message_id=temp_messages[user_id])
        del temp_messages[user_id]
    message = await query.message.reply_text(
        "üí¨ –í–≤–µ–¥–∏ —Å–≤–æ–π –ø—Å–µ–≤–¥–æ–Ω–∏–º (–¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤):",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
        ])
    )
    temp_messages[user_id] = message.message_id
    return SET_NICKNAME

async def receive_nickname(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    nickname = update.message.text.strip()
    logger.info(f"User {user_id} submitted nickname: {nickname}")
    if len(nickname) > 20:
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        if user_id in temp_messages:
            await context.bot.delete_message(chat_id=user_id, message_id=temp_messages[user_id])
        message = await update.message.reply_text(
            "‚ö†Ô∏è –ü—Å–µ–≤–¥–æ–Ω–∏–º —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π! –ü–æ–ø—Ä–æ–±—É–π –¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
            ])
        )
        temp_messages[user_id] = message.message_id
        return SET_NICKNAME
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–í–≤–µ–¥–∏ —Å–≤–æ–π –ø—Å–µ–≤–¥–æ–Ω–∏–º"
    if user_id in temp_messages:
        await context.bot.delete_message(chat_id=user_id, message_id=temp_messages[user_id])
        del temp_messages[user_id]
    nicknames[user_id] = {"nickname": nickname, "gender": "–ù–µ —É–∫–∞–∑–∞–Ω", "preferred_gender": "–õ—é–±–æ–π"}
    await update.message.reply_text(
        f"‚úÖ –ü—Å–µ–≤–¥–æ–Ω–∏–º '{nickname}' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!\n"
        "–¢–µ–ø–µ—Ä—å —Ç—ã –≥–æ—Ç–æ–≤ –∫ –∞–Ω–æ–Ω–∏–º–Ω–æ–º—É —á–∞—Ç—É. –ù–∞–∂–º–∏ '–ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞' üöÄ",
        reply_markup=get_main_keyboard()
    )
    return CHATTING

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ–ª–∞
async def set_gender(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    await query.answer()
    logger.info(f"User {user_id} requested to set gender")
    message = await query.message.reply_text(
        " transgender –í—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø–æ–ª:",
        reply_markup=get_gender_keyboard()
    )
    temp_messages[user_id] = message.message_id
    return SET_GENDER

async def set_gender_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    await query.answer()
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞
    if user_id in temp_messages:
        await context.bot.delete_message(chat_id=user_id, message_id=temp_messages[user_id])
        del temp_messages[user_id]
    if query.data == "gender_male":
        nicknames[user_id]["gender"] = "–ú—É–∂—Å–∫–æ–π"
        await query.message.reply_text(
            "‚úÖ –ü–æ–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: üë® –ú—É–∂—Å–∫–æ–π",
            reply_markup=get_main_keyboard()
        )
    elif query.data == "gender_female":
        nicknames[user_id]["gender"] = "–ñ–µ–Ω—Å–∫–∏–π"
        await query.message.reply_text(
            "‚úÖ –ü–æ–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: üë© –ñ–µ–Ω—Å–∫–∏–π",
            reply_markup=get_main_keyboard()
        )
    elif query.data == "gender_none":
        nicknames[user_id]["gender"] = "–ù–µ —É–∫–∞–∑–∞–Ω"
        await query.message.reply_text(
            "‚úÖ –ü–æ–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ‚ùì –ù–µ —É–∫–∞–∑–∞–Ω",
            reply_markup=get_main_keyboard()
        )
    return CHATTING

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–æ–≥–æ –ø–æ–ª–∞
async def set_preferred_gender(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    await query.answer()
    logger.info(f"User {user_id} requested to set preferred gender")
    message = await query.message.reply_text(
        "üîç –ö–æ–≥–æ —Ç—ã —Ö–æ—á–µ—à—å –Ω–∞–π—Ç–∏?",
        reply_markup=get_preferred_gender_keyboard()
    )
    temp_messages[user_id] = message.message_id
    return SET_PREFERRED_GENDER

async def set_preferred_gender_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    await query.answer()
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–æ–≥–æ –ø–æ–ª–∞
    if user_id in temp_messages:
        await context.bot.delete_message(chat_id=user_id, message_id=temp_messages[user_id])
        del temp_messages[user_id]
    if query.data == "pref_gender_male":
        nicknames[user_id]["preferred_gender"] = "–ú—É–∂—Å–∫–æ–π"
        await query.message.reply_text(
            "‚úÖ –ë—É–¥–µ–º –∏—Å–∫–∞—Ç—å: üë® –ú—É–∂—á–∏–Ω",
            reply_markup=get_main_keyboard()
        )
    elif query.data == "pref_gender_female":
        nicknames[user_id]["preferred_gender"] = "–ñ–µ–Ω—Å–∫–∏–π"
        await query.message.reply_text(
            "‚úÖ –ë—É–¥–µ–º –∏—Å–∫–∞—Ç—å: üë© –ñ–µ–Ω—â–∏–Ω",
            reply_markup=get_main_keyboard()
        )
    elif query.data == "pref_gender_any":
        nicknames[user_id]["preferred_gender"] = "–õ—é–±–æ–π"
        await query.message.reply_text(
            "‚úÖ –ë—É–¥–µ–º –∏—Å–∫–∞—Ç—å: üåê –õ—é–±–æ–π –ø–æ–ª",
            reply_markup=get_main_keyboard()
        )
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞
    if user_id in active_chats:
        await query.message.reply_text(
            "‚ö†Ô∏è –¢—ã —É–∂–µ –≤ —á–∞—Ç–µ! –ó–∞–≤–µ—Ä—à–∏ –µ–≥–æ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π.",
            reply_markup=get_main_keyboard()
        )
        return CHATTING
    if user_id in search_queue:
        await query.message.reply_text(
            f"‚è≥ –¢—ã —É–∂–µ –∏—â–µ—à—å! –í –æ—á–µ—Ä–µ–¥–∏: {len(search_queue)} —á–µ–ª–æ–≤–µ–∫...",
            reply_markup=get_main_keyboard()
        )
        return CHATTING
    search_queue.append(user_id)
    message = await query.message.reply_text(
        f"üîé –ò—â–µ–º —Ç–µ–±–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞... (–≤ –æ—á–µ—Ä–µ–¥–∏: {len(search_queue)} —á–µ–ª–æ–≤–µ–∫)",
        reply_markup=get_main_keyboard()
    )
    search_messages[user_id] = message.message_id
    context.job_queue.run_once(timeout_search, 60, data=user_id)
    context.job_queue.run_repeating(check_queue, interval=5, first=0, data=user_id)
    return CHATTING

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–æ–≥–æ –ø–æ–ª–∞
async def cancel_preferred_gender(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    await query.answer()
    logger.info(f"User {user_id} canceled preferred gender setup")
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞
    if user_id in temp_messages:
        await context.bot.delete_message(chat_id=user_id, message_id=temp_messages[user_id])
        del temp_messages[user_id]
    await query.message.reply_text(
        "üîç –ü–æ–∏—Å–∫ –ø–æ –ø–æ–ª—É –æ—Ç–º–µ–Ω—ë–Ω.",
        reply_markup=get_main_keyboard()
    )
    return CHATTING

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ–ª–∞
async def cancel_gender(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    await query.answer()
    logger.info(f"User {user_id} canceled gender setup")
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞
    if user_id in temp_messages:
        await context.bot.delete_message(chat_id=user_id, message_id=temp_messages[user_id])
        del temp_messages[user_id]
    await query.message.reply_text(
        " transgender –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=get_main_keyboard()
    )
    return CHATTING

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    await query.answer()
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –≤–≤–µ—Å—Ç–∏ –ø—Å–µ–≤–¥–æ–Ω–∏–º
    if user_id in temp_messages:
        await context.bot.delete_message(chat_id=user_id, message_id=temp_messages[user_id])
        del temp_messages[user_id]
    nicknames[user_id] = {"nickname": f"–ê–Ω–æ–Ω–∏–º_{user_id % 1000}", "gender": "–ù–µ —É–∫–∞–∑–∞–Ω", "preferred_gender": "–õ—é–±–æ–π"}
    logger.info(f"User {user_id} canceled nickname setup, using: {nicknames[user_id]['nickname']}")
    await query.message.reply_text(
        f"‚ú® –ü—Å–µ–≤–¥–æ–Ω–∏–º –Ω–µ –∑–∞–¥–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º: {nicknames[user_id]['nickname']}.\n"
        "–ì–æ—Ç–æ–≤ –∫ —á–∞—Ç—É? –ù–∞–∂–º–∏ '–ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞' üöÄ",
        reply_markup=get_main_keyboard()
    )
    return CHATTING

# --- –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–π–º–∞—É—Ç–∞ –ø–æ–∏—Å–∫–∞ ---
async def timeout_search(context: ContextTypes.DEFAULT_TYPE):
    user_id = context.job.data
    if user_id in search_queue:
        search_queue.remove(user_id)
        if user_id in search_messages:
            await context.bot.delete_message(chat_id=user_id, message_id=search_messages[user_id])
            del search_messages[user_id]
        await context.bot.send_message(
            chat_id=user_id,
            text="‚è≥ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ!",
            reply_markup=get_main_keyboard()
        )

# --- –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—á–µ—Ä–µ–¥–∏ ---
async def check_queue(context: ContextTypes.DEFAULT_TYPE):
    job = context.job
    user1 = job.data  # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∑–∞–ø—É—Å—Ç–∏–≤—à–∏–π –ø–æ–∏—Å–∫

    logger.info(f"[CHECK_QUEUE] Checking for user {user1}, queue: {list(search_queue)}")

    if user1 not in search_queue:
        logger.info(f"User {user1} is no longer in queue")
        job.schedule_removal()
        return

    if len(search_queue) < 2:
        logger.info("Not enough users in queue")
        return

    # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤
    potential_partners = list(search_queue)

    matched_user = None
    for partner_candidate in potential_partners:
        if partner_candidate == user1:
            continue

        user1_data = nicknames.get(user1, {})
        partner_data = nicknames.get(partner_candidate, {})

        user1_gender = user1_data.get("gender", "–ù–µ —É–∫–∞–∑–∞–Ω")
        user1_preferred = user1_data.get("preferred_gender", "–õ—é–±–æ–π")

        partner_gender = partner_data.get("gender", "–ù–µ —É–∫–∞–∑–∞–Ω")
        partner_preferred = partner_data.get("preferred_gender", "–õ—é–±–æ–π")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∑–∞–∏–º–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
        gender_match_1 = user1_preferred == "–õ—é–±–æ–π" or user1_preferred == partner_gender
        gender_match_2 = partner_preferred == "–õ—é–±–æ–π" or partner_preferred == user1_gender

        if gender_match_1 and gender_match_2:
            matched_user = partner_candidate
            break

    if not matched_user:
        logger.warning(f"No match found for user {user1}")
        return

    # –ù–∞—à–ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ ‚Äî —Å–æ–∑–¥–∞—ë–º —á–∞—Ç
    search_queue.remove(user1)
    search_queue.remove(matched_user)

    active_chats[user1] = matched_user
    active_chats[matched_user] = user1

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞
    if user1 in search_messages:
        await context.bot.delete_message(chat_id=user1, message_id=search_messages[user1])
        del search_messages[user1]
    if matched_user in search_messages:
        await context.bot.delete_message(chat_id=matched_user, message_id=search_messages[matched_user])
        del search_messages[matched_user]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    gender1 = f"({nicknames[user1].get('gender', '')})" if nicknames[user1].get("gender") != "–ù–µ —É–∫–∞–∑–∞–Ω" else ""
    gender2 = f"({nicknames[matched_user].get('gender', '')})" if nicknames[matched_user].get("gender") != "–ù–µ —É–∫–∞–∑–∞–Ω" else ""

    await context.bot.send_message(
        chat_id=user1,
        text=f"üéâ –ß–∞—Ç —Å {nicknames[matched_user]['nickname']} {gender2} –Ω–∞—á–∞—Ç!",
        reply_markup=get_main_keyboard()
    )
    await context.bot.send_message(
        chat_id=matched_user,
        text=f"üéâ –ß–∞—Ç —Å {nicknames[user1]['nickname']} {gender1} –Ω–∞—á–∞—Ç!",
        reply_markup=get_main_keyboard()
    )

    logger.info(f"‚úÖ Connected user {user1} with {matched_user}")
    job.schedule_removal()

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ ---
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    logger.info(f"User {user_id} pressed button: {query.data}")
    await query.answer()

    if query.data == "find":
        if user_id in active_chats:
            await query.message.reply_text(
                "‚ö†Ô∏è –¢—ã —É–∂–µ –≤ —á–∞—Ç–µ! –ó–∞–≤–µ—Ä—à–∏ –µ–≥–æ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π.",
                reply_markup=get_main_keyboard()
            )
            return
        if user_id in search_queue:
            await query.message.reply_text(
                f"‚è≥ –¢—ã —É–∂–µ –∏—â–µ—à—å! –í –æ—á–µ—Ä–µ–¥–∏: {len(search_queue)} —á–µ–ª–æ–≤–µ–∫...",
                reply_markup=get_main_keyboard()
            )
            return
        search_queue.append(user_id)
        message = await query.message.reply_text(
            f"üîé –ò—â–µ–º —Ç–µ–±–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞... (–≤ –æ—á–µ—Ä–µ–¥–∏: {len(search_queue)} —á–µ–ª–æ–≤–µ–∫)",
            reply_markup=get_main_keyboard()
        )
        search_messages[user_id] = message.message_id
        context.job_queue.run_once(timeout_search, 60, data=user_id)
        context.job_queue.run_repeating(check_queue, interval=5, first=0, data=user_id)

    elif query.data == "find_by_gender":
        await query.message.reply_text(
            "üîç –ö–æ–≥–æ —Ç—ã —Ö–æ—á–µ—à—å –Ω–∞–π—Ç–∏?",
            reply_markup=get_preferred_gender_keyboard()
        )
        return SET_PREFERRED_GENDER

    elif query.data == "end":
        if user_id not in active_chats:
            if user_id in search_queue:
                search_queue.remove(user_id)
                if user_id in search_messages:
                    await context.bot.delete_message(chat_id=user_id, message_id=search_messages[user_id])
                    del search_messages[user_id]
                await query.message.reply_text(
                    "üîç –ü–æ–∏—Å–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞?",
                    reply_markup=get_main_keyboard()
                )
            else:
                await query.message.reply_text(
                    "ü§î –¢—ã –Ω–µ –≤ —á–∞—Ç–µ –∏ –Ω–µ –≤ –ø–æ–∏—Å–∫–µ!", reply_markup=get_main_keyboard()
                )
            return

        partner_id = active_chats[user_id]
        del active_chats[user_id]
        del active_chats[partner_id]

        await context.bot.send_message(
            chat_id=user_id,
            text=f"üö™ –ß–∞—Ç —Å {nicknames.get(partner_id, {}).get('nickname', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')} –∑–∞–≤–µ—Ä—à–µ–Ω.\n–ö–∞–∫ —Ç–µ–±–µ —ç—Ç–æ—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫? –û—Ü–µ–Ω–∏:",
            reply_markup=get_rating_keyboard(partner_id)
        )

        await context.bot.send_message(
            chat_id=partner_id,
            text=f"üö™ –ß–∞—Ç —Å {nicknames.get(user_id, {}).get('nickname', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')} –∑–∞–≤–µ—Ä—à–µ–Ω.\n–ö–∞–∫ —Ç–µ–±–µ —ç—Ç–æ—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫? –û—Ü–µ–Ω–∏:",
            reply_markup=get_rating_keyboard(user_id)
        )

    elif query.data == "set_nickname":
        await query.message.reply_text(
            "üí¨ –í–≤–µ–¥–∏ –Ω–æ–≤—ã–π –ø—Å–µ–≤–¥–æ–Ω–∏–º (–¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤):",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
            ])
        )
        return SET_NICKNAME

    elif query.data == "set_gender":
        await query.message.reply_text(
            " transgender –í—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø–æ–ª:",
            reply_markup=get_gender_keyboard()
        )
        return SET_GENDER

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ü–µ–Ω–æ–∫ –∏ –∂–∞–ª–æ–± ---
async def handle_rating_or_report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    await query.answer()

    data = query.data.split("_")
    action = data[0]

    if action == "rate":
        _, partner_id_str, rating_str = data
        partner_id = int(partner_id_str)
        rating = int(rating_str)

        if partner_id not in ratings:
            ratings[partner_id] = {"total": 0, "count": 0}
        ratings[partner_id]["total"] += rating
        ratings[partner_id]["count"] += 1

        avg_rating = round(ratings[partner_id]["total"] / ratings[partner_id]["count"], 1)
        await query.message.edit_text(
            f"‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É!\n–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {avg_rating} ‚≠ê",
            reply_markup=None
        )

    elif action == "report":
        _, partner_id_str = data
        partner_id = int(partner_id_str)

        if partner_id not in reports:
            reports[partner_id] = 0
        reports[partner_id] += 1

        report_count = reports[partner_id]
        await query.message.edit_text(
            f"‚ö†Ô∏è –°–ø–∞—Å–∏–±–æ –∑–∞ –∂–∞–ª–æ–±—É!\n–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–æ–ª—É—á–∏–ª {report_count} –∂–∞–ª–æ–±(—É/–∏).",
            reply_markup=None
        )

        if report_count >= 3:
            await context.bot.send_message(
                chat_id=partner_id,
                text="üö´ –¢–µ–±–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∂–∞–ª–æ–±. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–±–ª—é–¥–∞–π –ø—Ä–∞–≤–∏–ª–∞ –æ–±—â–µ–Ω–∏—è."
            )

    data_to_save = {
        "search_queue": search_queue,
        "active_chats": active_chats,
        "nicknames": nicknames,
        "ratings": ratings,
        "reports": reports,
    }
    save_data(data_to_save)
    return CHATTING

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ---
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    message = update.message.text
    logger.info(f"User {user_id} sent message: {message}")
    if user_id in active_chats:
        partner_id = active_chats[user_id]
        await context.bot.send_message(
            chat_id=partner_id,
            text=f"üí¨ {nicknames[user_id]['nickname']}: {message}"
        )
    else:
        await update.message.reply_text(
            "ü§î –¢—ã –Ω–µ –≤ —á–∞—Ç–µ! –ù–∞–∂–º–∏ '–ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞'.",
            reply_markup=get_main_keyboard()
        )

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ ---
async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.error(f"Update {update} caused error {context.error}")

# --- main() —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏ ---
def main():
    application = ApplicationBuilder().token('8085719324:AAHY00FYX7XptMqEE3odkUROFXv7bDhSLC0').build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            SET_NICKNAME: [
                CallbackQueryHandler(set_nickname, pattern="set_nickname"),
                CallbackQueryHandler(cancel, pattern="cancel"),
                MessageHandler(filters.TEXT & ~filters.COMMAND, receive_nickname),
            ],
            SET_GENDER: [
                CallbackQueryHandler(set_gender_choice, pattern="^gender_(male|female|none)$"),
                CallbackQueryHandler(cancel_gender, pattern="cancel_gender"),
            ],
            SET_PREFERRED_GENDER: [
                CallbackQueryHandler(set_preferred_gender_choice, pattern="^pref_gender_(male|female|any)$"),
                CallbackQueryHandler(cancel_preferred_gender, pattern="cancel_pref_gender"),
            ],
            CHATTING: [
                CallbackQueryHandler(button),
                CallbackQueryHandler(handle_rating_or_report, pattern="^(rate|report)_"),  # ‚Üê –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫!
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message),
            ],
        },
        fallbacks=[],
    )

    application.add_handler(conv_handler)
    application.add_error_handler(error_handler)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º
    import atexit
    atexit.register(save_data, {
        "search_queue": search_queue,
        "active_chats": active_chats,
        "nicknames": nicknames,
        "ratings": ratings,
        "reports": reports,
    })

    logger.info("Bot is starting...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()